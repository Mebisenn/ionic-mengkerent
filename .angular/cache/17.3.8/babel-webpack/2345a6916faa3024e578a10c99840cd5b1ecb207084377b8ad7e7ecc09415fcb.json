{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { from, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/storage-angular\";\nexport let CarsService = /*#__PURE__*/(() => {\n  var _CarsService;\n  class CarsService {\n    constructor(http, storage) {\n      this.http = http;\n      this.storage = storage;\n      this.apiUrl = 'https://www.sipelantis.com/api/carunits';\n    }\n    getCars() {\n      return from(this.storage.get('auth-token')).pipe(switchMap(token => {\n        if (!token) {\n          return throwError('No token found');\n        }\n        const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n        return this.http.get(this.apiUrl, {\n          headers\n        }).pipe(catchError(error => {\n          console.error('HTTP error:', error);\n          return throwError(error);\n        }));\n      }), catchError(error => {\n        console.error('Storage error:', error);\n        return throwError(error);\n      }));\n    }\n    getCarDetails(carId) {\n      return from(this.storage.get('auth-token')).pipe(switchMap(token => {\n        if (!token) {\n          return throwError('No token found');\n        }\n        const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n        const url = `${this.apiUrl}/${carId}`;\n        return this.http.get(url, {\n          headers\n        }).pipe(catchError(error => {\n          console.error('HTTP error:', error);\n          return throwError(error);\n        }));\n      }), catchError(error => {\n        console.error('Storage error:', error);\n        return throwError(error);\n      }));\n    }\n  }\n  _CarsService = CarsService;\n  _CarsService.ɵfac = function CarsService_Factory(t) {\n    return new (t || _CarsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Storage));\n  };\n  _CarsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _CarsService,\n    factory: _CarsService.ɵfac,\n    providedIn: 'root'\n  });\n  return CarsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}