{"ast":null,"code":"import _asyncToGenerator from \"C:/project_mengkerent/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _AuthGuard;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/storage-angular\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(storage, router) {\n    this.storage = storage;\n    this.router = router;\n  }\n  canActivate() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.storage.create(); // Make sure storage is created\n      try {\n        const token = yield _this.storage.get('auth-token');\n        if (token) {\n          return true; // Continue navigation if token exists (user is logged in)\n        } else {\n          _this.router.navigate(['/login']); // Redirect to login page if no token\n          return false;\n        }\n      } catch (error) {\n        console.error('Error checking authentication:', error);\n        _this.router.navigate(['/login']); // Redirect to login page if there's an error\n        return false;\n      }\n    })();\n  }\n}\n_AuthGuard = AuthGuard;\n_AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || _AuthGuard)(i0.ɵɵinject(i1.Storage), i0.ɵɵinject(i2.Router));\n};\n_AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _AuthGuard,\n  factory: _AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthGuard","constructor","storage","router","canActivate","_this","_asyncToGenerator","create","token","get","navigate","error","console","i0","ɵɵinject","i1","Storage","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\project_mengkerent\\src\\app\\guard\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { Storage } from '@ionic/storage-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private storage: Storage,\r\n    private router: Router\r\n  ) {}\r\n\r\n  async canActivate(): Promise<boolean> {\r\n    await this.storage.create(); // Make sure storage is created\r\n\r\n    try {\r\n      const token = await this.storage.get('auth-token');\r\n      if (token) {\r\n        return true; // Continue navigation if token exists (user is logged in)\r\n      } else {\r\n        this.router.navigate(['/login']); // Redirect to login page if no token\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking authentication:', error);\r\n      this.router.navigate(['/login']); // Redirect to login page if there's an error\r\n      return false;\r\n    }\r\n  }\r\n}"],"mappings":";;;;;AAOA,OAAM,MAAOA,SAAS;EAEpBC,YACUC,OAAgB,EAChBC,MAAc;IADd,KAAAD,OAAO,GAAPA,OAAO;IACP,KAAAC,MAAM,GAANA,MAAM;EACb;EAEGC,WAAWA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACf,MAAMD,KAAI,CAACH,OAAO,CAACK,MAAM,EAAE,CAAC,CAAC;MAE7B,IAAI;QACF,MAAMC,KAAK,SAASH,KAAI,CAACH,OAAO,CAACO,GAAG,CAAC,YAAY,CAAC;QAClD,IAAID,KAAK,EAAE;UACT,OAAO,IAAI,CAAC,CAAC;SACd,MAAM;UACLH,KAAI,CAACF,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;UAClC,OAAO,KAAK;;OAEf,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDN,KAAI,CAACF,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAClC,OAAO,KAAK;;IACb;EACH;;aAvBWV,SAAS;;mBAATA,UAAS,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAATlB,UAAS;EAAAmB,OAAA,EAATnB,UAAS,CAAAoB,IAAA;EAAAC,UAAA,EAFR;AAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}